#+SETUPFILE: ~/Documents/style.setup
#+STARTUP: inlineimages:png
#+OPTIONS: num:nil
#+LATEX_HEADER: \usepackage{ulem}
#+LATEX_HEADER: \usepackage{ctex}
#+LaTeX_HEADER: \sectionfont{\normalfont\scshape}
#+LaTeX_HEADER: \subsectionfont{\normalfont\itshape}
#+AUTHOR: whiothes
* Redis 设计与实现
** 第零部分 勘误
   [[http://redisbook.com/errata/index.html][勘误信息 — Redis 设计与实现]]
** 第一部分 数据结构与对象
*** 第2章 简单动态字符串(Simple Dynamic String)
**** SDS的实现
     #+begin_src c
       struct sdshdr {
         int len;  //所保存字符串的长度
         int free; // 空闲字节数
         char buf[]; // 用于保存字符串
       }
     #+end_src
*** 第3章 链表
**** 链表和链表节点的实现
     #+begin_src c
       typedef struct listNode {
         struct listNode *prev;
         struct listNode *next;
         void *value;
       } listNode;

       typedef struct list {
         listNode *head;
         listNode *tail;
         unsigned long len;

         void *(*dup)(void *ptr); // 节点值复制函数
         void (*free)(void *ptr); // 节点值释放函数
         int (*match)(void *ptr, void *key); // 节点值对比函数
       } list;
     #+end_src
**** 链表和链表节点的API
     | 函数               | 作用                                   | 时间复杂度 |
     |--------------------+----------------------------------------+------------|
     | listSetDupMethod   | 将给定的函数设置为链表的节点值复制函数 |            |
     | listGetDupMethod   | 返回链表当前正在使用的节点值复制函数   |            |
     | listSetFreeMethod  | 将给定的函设置为链表的节点释放函数     |            |
     | listGetFree        | 返回链表当前正在使用的节点值释放函数   |            |
     | listSetMatchMethod |                                        |            |
     | listGetMatchMethod |                                        |            |

*** 第4章 字典 [7/7]
**** DONE 4.1  字典的实现
     CLOSED: [2019-12-04 Wed 21:03]
***** 4.1.1 哈希表
      #+begin_src c
        typedef struct dictht  {
          // 哈希表数组
          dictEntry **table;

          // 哈希表大小
          unsigned long size;

          // 哈希表大小掩码, 用于计算索引值
          // 总是等于 size - 1;
          unsigned long sizemask;

          // 已有节点数
          unsigned long used;
        } dictht;
      #+end_src
***** 4.1.2 哈希表节点
      #+begin_src c
        typedef struct dictEntry {
          // 键
          void *key;

          // 值
          union {
            void *val;
            uint64_t u64;
            int64_t s64;
          } v;

          struct dictEntry *next;
        };
      #+end_src
***** 4.1.3 字典
      #+begin_src c
        typedef struct dictType {
          // 计算哈希值
          unsigned int (*hashFunction)(const void *key);

          // 复制键
          void *(keyDup)(void *privdata, const void *key):

            // 复制值
            void *(valDup)(void *privdata, const void *val);

          // 对比键
          int (*keyCompare)(void *privdata, const void *key1, const void *key2);

          // 销毁键
          void (*keyDestructor)(void *privdata, void *key);

          // 销毁值
          void (*valDestructor)(void *privdata, void *val);
        } dictType;

        typedef struct dict {
          // 类型特定函数
          dictType *type;

          // 私有数据
          void *privdata;

          // 哈希表
          // 常用0; 1供大量数据rehash时使用
          dictht ht[2];

          // rehash索引
          // 当rehash 不在进行时, 值为 -1
          int rehashidx;

          // 目前正在运行的安全迭代器的数量
          int iterators;
        } dict;
      #+end_src
**** DONE 4.2 哈希算法
     CLOSED: [2019-12-04 Wed 21:03]
     * Redis 使用 MurmurHash2 算法来计算键的哈希值
**** DONE 4.3 解决键冲突
     CLOSED: [2019-12-04 Wed 21:03]
     * Redis 采用链地址法来解决键冲突, 每个哈希表节点都有一个next指针, 多个哈希表节点可以用next指针构成一个单向链表.
**** DONE 4.4 rehash
     CLOSED: [2019-12-04 Wed 21:03]
     当哈希表保存的键值对数据太多或者太少时, 程序需要对哈希表的大小进行相应的扩展或者收缩
     步骤:
     1) 为字典的ht[1]哈希表分配空间, 这个哈希表的空间大小取决于要执行的操作, 以及ht[0]当前包含的键值对数量(ht[0].used的值)
        - 扩展操作: \(ht[1].used = \begin{cases}
                                   ht[1].used \ge ht[0].used \cdot 2\\
                                   ht[1].used = 2^{n}
                                   \end{cases}\)
        - 收缩: \(ht[1].used = \begin{cases}
                                   ht[1].used \ge ht[0].used \\
                                   ht[1].used = 2^{n}
                                   \end{cases}\)
     2) 将保存在ht[0]中的所有键值对rehash到ht[1]上面: rehash 需要重新计算hash 和 index
     3) 当ht[0]包含的所有键值对都迁移到ht[1]之后, 释放ht[0]. 将ht[1]置为ht[0], 并在ht[1]新建空表
***** 哈希表的扩展与收缩
      当以下条件任意一个被满足时, 自动开始扩展
      1) 服务器目前 *没有* 执行 BGSAVE 或 BGREWRITEAOF, 且哈希表负载因子大于等于 *1*
      2) 服务器目前 *正在* 执行 BGSAVE 或 BGREWRITEAOF, 且哈希表负载因子大于等于 *5*
**** DONE 4.5 浙进式rehash
     CLOSED: [2019-12-04 Wed 21:13]
     为了避免 rehash 对服务器性能造成影响, 分多次, 渐进式将ht[0]里面的键值对 rehash 到 ht[1]
     渐进式 rehash 详细步骤:
     1) 为 ht[1] 分配空间, 让字典同时持有 ht[0] 和 ht[1] 两个哈希表
     2) 在字典中维持一个索引计数器变量 rehashidx, 置为0
     3) rehash 期间, 每次对字典执行添加/删除/查找或者更新时, 除了执行指定的操作以外, 还会将ht[0]哈希表在rehashidx 索引上的所有键值对 rehash到 ht[1], rehash完成后, rehashidx++
     4) rehash完成, rehashidx置为-1
***** 浙进式rehash执行期间的哈希表操作
      - 字典的操作会在两个哈希表上进行. 如查找: 先在ht[0]中查找, 没有继续查找到ht[1]
      - 渐进式 rehash 期间, 新添加到字典的键值对一律保存到ht[1]里面, ht[0] 不再进行添加操作
**** DONE 4.6 字典API
     CLOSED: [2019-12-04 Wed 21:13]
     #+name: 表4-1 字典与主要操作API
     | 函               | 作用                           | 时复杂度            |
     |------------------+--------------------------------+---------------------|
     | dictCreate       |                                | O(1)                |
     | dictAdd          |                                | O(1)                |
     | dictReplace      |                                | O(1)                |
     | dictFetchValue   |                                | O(1)                |
     | dictGetRandomKey |                                | O(1)                |
     | dictDelete       |                                | O(1)                |
     | dictRelease      | 释字以及字典中包含的所有键值对 | O(N), N为键值对数量 |
**** DONE 4.7 重点回顾
     CLOSED: [2019-12-04 Wed 21:15]
     - 字典被广告应用, 包括数据库和哈希键
     - Redis中的字典使用哈希表作为底层实现, 每个字典带有两个哈希表, 一个平时使用, 一个 rehashd
     - Redis使用MurmurHash2算法计算键的哈希值
     - 哈希表使用链地址法争决键冲突
     - 对哈希表扩展或者收缩时, 程序需要进行渐进式 rehash

*** 第5章 跳跃表
**** 跳跃表的实现 [fn:1]
***** 跳跃表节点
      #+begin_src c
        typedef struct zskiplistNode {
          // 层
          struct zskiplistLevel {
            // 前进指针
            struct zskiplistNode *forward;

            // 跨度
            unsigned int span;
          } level[];

          // 后退指针
          struct zskiplistNode *backward;

          // 分值
          double score;

          // 成员对象robj *obj
        } zskiplistNode;
      #+end_src
      1. 层
      2. 前进指针 \\
         用于从表头向表尾访问访问节点
      3. 跨度 \\
         层的跨度，记录丙个节点之间的距离
      4. 后退指针 \\
         用于从表尾向表头访问节点，每个节点只有一个后退指针，所以每次只能后退至前一个节点
      5. 分值和成员 \\
         所有成员按分值大小排序 \\
         成员对象是一个保存字符串对象的指针，字符串对象保存一个 SDS 值。
*** 第6章 整数集合的实现
**** 整数集合的实现
     #+begin_src c
       typedef struct intset {
         // 编码方式
         uint32_t encoding;

         // 集合包含的元素数量
         uint32_t length;

         // 保存元素的数组
         int8_t contents[];
       } itnset;
     #+end_src
*** 第7章 压缩列表
** 第二部分 单机数据库的实现
*** 第9章 数据库
*** 第10章 RDB持久化
*** 第11章 AOF持久化
*** 第12章 事件
*** 第13章 客户端
*** 第14章 服务器
** 第三部分 多机数据库的实现
** 第四部分 独立功能的实现

* Footnotes

[fn:1] [[https://en.wikipedia.org/wiki/Skip_list][Skip list - Wikipedia]]
