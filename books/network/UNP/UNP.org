#+OPTIONS: num:nil
#+SETUPFILE: ~/Documents/style.setup
#+LATEX_HEADER: \usepackage{xeCJK}
#+LATEX_HEADER: \usepackage{hyperref}
#+LaTeX_HEADER: \pdfmapfile{/home/neilsen/texmf/fonts/map/dvips/libertine/libertine.map}
#+LaTeX_HEADER: \usepackage[ttscale=.875]{libertine}
#+LaTeX_HEADER: \usepackage{sectsty}
#+LaTeX_HEADER: \sectionfont{\normalfont\scshape}
#+LaTeX_HEADER: \subsectionfont{\normalfont\itshape}
#+AUTHOR: whiothes

* Unix Network Programming [0%]
** TODO Part 1: Introduction and TCP/IP [0/2]
*** TODO Chapter 1. Introduction [4/5]
**** DONE 1.1 Introduction
     CLOSED: [2020-05-20 Wed 21:39]
     #+caption: Figure 1.1 Network application: client and server
     #+begin_src plantuml :file Chapter01/01fig01.jpg :cmdline charset utf-8
       digraph G {
               rankdir = LR;

               client[shape="box"]
               server[shape="box"]

               client -> server[label="application protocol", dir="both"]
       }
     #+end_src

     #+RESULTS:
     [[file:Chapter01/01fig01.jpg]]

**** DONE 1.2 A Simple Daytime Client
     CLOSED: [2020-05-20 Wed 21:39]
     #+caption: Figure 1.6 TCP daytime client
     #+include: "Chapter01/01fig05.c" src c
**** DONE 1.3 Protocol Independence
     CLOSED: [2020-05-20 Wed 21:39]
     modify to work under IPv6

     #+caption: Figure 1.6 Version of Figure 1.5 for IPv6
     #+include: "Chapter01/01fig06.c" src c

     discuss convert between hostnames and IP address and between service names and ports in Chapter 11.
**** DONE 1.4 Error Handling: Wrapper Functions
     CLOSED: [2020-05-20 Wed 21:47]
     Terminating on an error is the common case, shorten function like below.

     #+caption: Figure 1.7 Our wrapper function for the ~socket~ function
     #+begin_src c
       int Socket(int family, int type, int protocol) {
           int n;

           if ((n = socket(family, type, protocol)) < 0) {
               err_sys("socket error");
           }
           return (n);
       }
     #+end_src

     #+caption: Figure 1.8 Our wrapper function for ~pthread_mutex_lock~
     #+begin_src c
       void Pthread_mutex_lock(pthread_mutex_t *mptr) {
           int n;

           if ((n = pthread_mutex_lock(mptr)) == 0) {
               return;
           }

           errno = n;
           err_sys("pthread_mutex_lock error");
       }
     #+end_src

     * Unix =errno= Value
       When an error occurs in a Unix function (sucn as one of socket functions), the global variable errno is set to a positive value and normally returns -1.

       defined in <sys/errno.h>

**** TODO 1.5 A Simple Daytime Server
