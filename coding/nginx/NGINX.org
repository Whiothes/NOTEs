#+SETUPFILE: ~/Documents/style.setup
#+OPTIONS:   num:nil
#+AUTHOR:    whiothes
#+TITLE:  Nginx 学习

* Nginx 源码学习笔记

** core

*** ngx_time_init
    ngx_try_lock GCC -std=c11 可用[fn:1]

*** ngx_log_init

*** ngx_regex_init

*** ngx_save_argv
    参数保存到循环

*** ngx_signal_process
    处理信号

* Footnotes
[fn:1] [[https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html][Using the GNU Compiler Collection (GCC): __atomic Builtins]]

* 深入理解 Nginx

** 第 2 章 Nginx 的配置 (常用，详情见书本）

*** 2.3 Nginx 服务的基本配置

**** 2.3.1 用于高度进程和定位问题的配置项
     1. 是否以 master/worker 方式工作
        语法：master_process on | off;
        默认：master_process on;
        以一个 master 进程管理多个 worker 进程的方式运行，几乎所有产品环境下都以这种方式工作。
     2. error 日志的设置
        语法：error_log /path/file level;
        默认：error_log logs/error.log error;
        level 取值范围递增顺序: debug、info、notice、warn、error、crit、alert、emerg。
        大于或等于指定级别的日志会被输出到 /path/file 文件
     3. 是否处理几个特殊的调试点
        语法：debug_points [stop|abort]
        Nginx 在一些关键的错误逻辑中设置了调试点。
        debug_points stop：Nginx 的代码执行到这些调试点时发出 SIGSTOP 信号
        debug_points abort：产生一个 coredump 文件，可以用 gdb 调试
     4. 仅对指定的客户端输出 debug 日志
        语法：debug_connection [IP|CIDR]
        使仅来自指定地址的请求才会输出 debug 日志，其它请求仍沿用 error_log 中配置的日志级别。
        必须放在 events 模块中生效。例：
        #+begin_src nginx
          events {
              debug_connection 10.224.66.14;
              debug_connection 10.224.57.0/24;
          }
        #+end_src
     5. 限制 coredump 文件的大小
        语法：worker_rlimit_core size;
     6. 指定 coredump 文件生成目录
        语法：working_directory path;
        需确保 worker 进程有权限向所指定的目录写入文件。

**** 2.3.2 正常运行的配置项
     1. 定义环境变量
        语法：env VAR|VAR=VALUE;
        让用户直接设置操作系统上的环境变量：
        #+begin_src sh
          env TESTPATH=/tmp
        #+end_src
     2. 嵌入其它配置文件
        语法：include /path/file;
        将其它配置文件嵌入到当前的 nginx.conf 中，
        #+begin_src nginx
          include mime.types;
          include vhost/*.conf;
        #+end_src
     3. pid 文件的路径
        语法：pid path/file;
        默认：pid logs/nginx.pid;
     4. Nginx worker 进程运行的用户及用户组
        语法：user username [groupname];
        默认：user nobody nobody;
        用于设置 master 进程启动后，fork 出的 worker 进程运行在哪个用户和组下。
        当按照 “user username;” 设置时，用户和组名相同。
        若 configure 时指定了 --user=username 和 --group=groupname，此时 nginx.conf 将使用参数中指定的用户和组。
     5. 指定 Ngxin worker 进程可以打开的最大句柄描述符个数
        语法：worker_rlimit_nofile limit;
     6. 限制信号队列
        语法：worker_rlimit_sigpending limit;
        设置每个用户发往 Nginx 的信号队列的大小。

**** 2.3.3 优化性能的配置项
     1. Nginx worker 进程个数
        语洁：worker_processes number;
        默认：worker_processes 1;
        一般等于 CPU 核心数
     2. 绑定 Nginx worker 进程到指定的 CPU 内核
        语法：worker_cpu_affinity cpumask [cpumask...]
        避免多个 worker 进程抢同一个 CPU，出现同步问题。
        #+begin_src nginx
          worker_processes 4;
          worker_cpu_affinity 1000 0100 0010 0001;
        #+end_src
     3. SSL 硬件加速
        语法：ssl_engine device;
        查看是否有 SSL 硬件加速设备：
        #+begin_src sh
          openssl engine -t
        #+end_src
     4. Nginx worker 进程优先级设置
        语法：worker_priorty nice;
        默认：worker_priority 0;
        配置Nginx worker 进程的 nice 优先级。(-20 ~ +19)

**** 2.3.4 事件类配置项
     1. 是否打开 accept 锁
        语法：accept_mutex on | off;
        默认：accept_mutex on;
        可以让多个 worker进程轮流地、序列化地与新的客户端建立 TCP 连接。（第 9 章事件处理框架中详述 Nginx 如何实现负载均衡原理）。
        默认打开，非常不建议关闭。
     2. lock 文件的路径
        语法：lock_file path/file;
        默认：lock_file logs/nginx.lock;
        打开 accept 锁且编译编译程序或系统架构等因素导致 Nginx 不支持原子锁时，才使用文件锁实现 accept 锁（14.8.1 节介绍）。
     3. 每个 worker 的最大连接数
        语法：worker_connections number;
        定义每个 worker 的最大连接数

*** 2.4 用 HTTP 核心模块配置一个静态 Web 服务器
    示例：
    #+begin_src nginx
      http {
          gzip on;
          upstream {
              ...
          }
          ...
          server {
              listen localhost:80;
              ...
              location /webstatic {
                  if ... {
                      ...
                  }
                  root /opt/webresource;
                  ...
              }
              location ~* .(jpg|jpeg|png|jpe|gif)$ {
                  ...
              }
          }
          server {
              ...
          }
      }
    #+end_src

**** 2.4.1 虚拟主机与请求的分发
     1. 监听端口
        语法：listen address:port [ default_server | [ backlog=num | rcvbuf=size |sndbuf=size | accept_filter=filter | deferred | bind | ipv6only=[on|off] | ssl ] ];
        默认：listen 80;
        配置块：server
        参数说明：
        - default: 将所在的 server 块作为整个Web 服务的默认 server 块。如果没有设置则会以第一个 server 块作为默认。
        - backlog=num: 表示 TCP 中 backlog 队列的大小。默认为 -1，表示不设置。
        - rcvbuf=size: 设置监听句柄的 SO_RCVBUF 参数。
        - sndbuf=size: 设置监听句柄的 SO_SNDBUF 参数。
        - deferred: 只有用户真的发送请求数据时（内核已在网卡中收到请求数据包），才会唤醒 worker 进程处理这个连接。
        - bind: 绑定端口地址对，只有同时对一个端口监听多个地址时生效。
        - ssl: 在当前监听的端口上建立的连接必须基于 SSL 协议。
     2. 主机名称
        语法：server_name name [...];
        默认：server_name "";
        配置块：server
        server_name 后可以跟多个主机名称。
        在开始处理一个 HTTP 请求时，Nginx 会取出 eader 头中的 Host，与每个 server 中的 server_name 进行匹配，以此决定由哪一个 server 块来处理这个请求。
        如果多个匹配，则按优先级决定：
        1) 首先选择所有字符串完全匹配的 server_name，如 www.testweb.com;
        2) 其次选择通配符在前面的 server_name, 如 *.testweb.com
        3) 通配符在后面的 server_name，如 www.testweb.*;
        4) 正则表达式匹配的 server_name，如 ~^\.testweb\.com$;
        如果所有 server_name 都不匹配，则按下列顺序选择处理的 server 块。
        1) 优先选择在 listen 配置项后加入 [default | default_server] 的 server 块。
        2) 找到匹配 listen 端口的第一个 server 块。
     3. 重定向主机名称的处理
        语法：server_name_in_redirect on | off;
        默认：server_name_in_redirect on;
        配置块：http、server 或者 location
        需要配合 server_name 使用。
     4. location
        语法： location [ = | ~ | ~* | ^~ | @ ] /uri/ {...}
        配置块：server
        location 会尝试根据用户请求中的 URI 来匹配上面的 /uri 表达式
        匹配规则：
        1) = 表示把 URI 作为字符串，以便与参数中的 uri 完全匹配。
        2) ~ 表示匹配 URI 时是字母大小写敏感的。
        3) ~* 表示匹配 URI 时忽略大小写。
        4) ^~ 表示匹配 URI 时只需要前半部分与 uri 参数匹配即可。
        5) @ 表示仅用于 Nginx 服务内部请求之间的重定向，不直接处理用户请求。

**** 2.4.2 文件路径的定义
     1. 以 root 方式设置资源路径
        语法：root path;
        默认：root html;
        配置块：http、server、location、if
     2. 以 alias 方式设置资源路径
        语法：alias path;
        配置块：location
        #+begin_src nginx
          # 以 alias 方式
          location /conf {
              alias /usr/local/nginx/conf/;
          }
          # 以 root 方式
          location /conf {
              root /usr/local/nginx/;
          }
        #+end_src
     3. 访问首页
        语法：index file ...;
        默认：index index.html;
        配置块：http、server、location
        index 后可以跟多个文件参数，Nginx 会按照顺序访问
     4. 根据 HTTP 返回码重定向页面
        语法：error_page code [ code... ] [ = | =answer-code ] uri | @name_location
        配置块：http、server、location、if
        例（返回码与原来相同）：
        #+begin_src nginx
          error_page 404         /404.html;
          error_page 502 503 504 /50x.html;
          error_page 403         http://example.com/forbidden.html;
          error_page 404         = @fetch;
        #+end_src
        更改返回错误码
        #+begin_src nginx
          error_page 404 =200 /empty.gif;
          error_page 404 =403 /forbidden.gif;
        #+end_src
        由重定向后实际处理的真实结果决定返回码
        #+begin_src nginx
          error_page 404 = /empty.gif;
        #+end_src
        重定向到另一个 location 处理（反向代理到上游服务器中处理）
        #+begin_src nginx
          location / {
              error_page 404 @fallback;
          }
          location @fallback {
              proxy_pass http://backend;
          }
        #+end_src

**** 2.4.3 内存及磁盘资源的分配

**** 2.4.7 文件操作的优化
     1. sendfile 系统调用
        语法：sendfile on | off;
        默认：sendfile off;
        配置块：http、server、location
        可以启用 Linux 上的 sendfile 系统调用来发送文件，减少内核态与用户态之间的两次内存复制，这样就会从磁盘中读取文件后直接在内核态发送到网卡设备，提高了发送文件的效率。

** 第 3 章 开发一个简单的 HTTP 模块

*** 3.1 如何调用 HTTP 模块
    #+begin_src plantuml :cmd charset=utf-8 :file 3-1.jpg
      title 图 3-1 Nginx HTTP 模块调用的简化流程
      header /footer
      hide footbox
      participant "worker 进程主循环" as A
      participant "事件模块" as B
      participant "HTTP 框架" as C
      participant "HTTP 处理模块1" as D
      participant "HTTP 过滤模块链表" as E
      participant "其他 HTTP 处理模块" as F
      A ->  B ++ : 调用事件模块
      B ->  B    : 建立 TCP 连接
      B ->  C ++ : 根据配置文件交由 HTTP 框架处理
      C ->  C    : 表求的 HTTP 包头
      C ->  D ++ : 根据 location 配置调用 HTTP 模块处理请求
      D ->  D    : 处理请求
      D ->  E ++ : 发送 HTTP 响应时依次调用所有 HTTP 过滤模块
      E ->  E    : 根据配置文件决定如何处理
      return 所有 HTTP 过滤模块反回
      return 处理后返回
      C ->  F ++ : 根据处理模块的逻辑决定是否执行 POST 请求
      return POST 请求返回
      return 控制权交还
    #+end_src
    #+RESULTS:
    [[file:3-1.jpg]]

*** 3.2  准备工作
